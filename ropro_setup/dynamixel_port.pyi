from typing import List, Union, Optional

class DynamixelPort:
    def __init__(self) -> None: ...
    
    def establish_connection(self, device_name: str, baudrate: int = ...) -> None: ...
    
    def disconnect(self) -> None: ...
    
    def set_baudrate(self, baudrate: int) -> None: ...
    
    def set_torque_enabled(self, ids: Union[int, List[int]], enabled: bool = ..., max_current: Optional[int] = ...) -> None: ...
    
    def set_operating_mode(self, ids: Union[int, List[int]], mode: Union[int, List[int]]) -> None: ...
    
    def set_goal_pos(self, ids: Union[int, List[int]], goal_pos: Union[int, List[int]]) -> None: ...
    
    def set_goal_vel(self, ids: Union[int, List[int]], goal_vel: Union[int, List[int]]) -> None: ...
    
    def set_goal_current(self, ids: Union[int, List[int]], goal_current: Union[int, List[int]]) -> None: ...
    
    def get_torque_enabled(self, ids: Union[int, List[int]]) -> List[bool]: ...
    
    def get_pos(self, ids: Union[int, List[int]], multi_turn: bool = ...) -> List[int]: ...
    
    def get_vel(self, ids: Union[int, List[int]]) -> List[int]: ...
    
    def get_current(self, ids: Union[int, List[int]]) -> List[int]: ...
    
    def get_voltage(self, ids: Union[int, List[int]]) -> List[int]: ...
    
    def execute_compliant_interpolation(self, ids: Union[int, List[int]], keyframes: List[List[int]], durations: List[float], current: int = ..., reset: bool = ..., reset_duration: float = ...) -> None: ...
    
    def execute_interpolation(self, ids: Union[int, List[int]], keyframes: List[List[int]], durations: List[float], reset: bool = ..., reset_duration: float = ...) -> None: ...
    
    def converge_to_pos(self, ids: Union[int, List[int]], target_pos: List[int], gain: float, current: Union[int, List[int]]) -> None: ...
    
    def scan_motor_ids(self, candidates: range = ...) -> List[int]: ...
    
    def send_command(self, ids: Union[int, List[int]], address: int, value: Union[int, List[int]], nbytes: int) -> None: ...
    
    def get_motor_value(self, ids: Union[int, List[int]], address: int, nbytes: int, two_comp_thres: Optional[int] = ..., two_comp_sub: Optional[int] = ...) -> List[int]: ...